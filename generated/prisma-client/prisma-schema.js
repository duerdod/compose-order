module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateProduct {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  groupId: Int!
  name: String!
  subname: String
  description: String
  images: String
  price: Int!
  currency: String!
  qty: Int!
  qtySuffix: String!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  groupId: Int!
  name: String!
  subname: String
  description: String
  images: String
  price: Int!
  currency: String!
  qty: Int!
  qtySuffix: String!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  groupId_ASC
  groupId_DESC
  name_ASC
  name_DESC
  subname_ASC
  subname_DESC
  description_ASC
  description_DESC
  images_ASC
  images_DESC
  price_ASC
  price_DESC
  currency_ASC
  currency_DESC
  qty_ASC
  qty_DESC
  qtySuffix_ASC
  qtySuffix_DESC
}

type ProductPreviousValues {
  id: ID!
  groupId: Int!
  name: String!
  subname: String
  description: String
  images: String
  price: Int!
  currency: String!
  qty: Int!
  qtySuffix: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  groupId: Int
  name: String
  subname: String
  description: String
  images: String
  price: Int
  currency: String
  qty: Int
  qtySuffix: String
}

input ProductUpdateManyMutationInput {
  groupId: Int
  name: String
  subname: String
  description: String
  images: String
  price: Int
  currency: String
  qty: Int
  qtySuffix: String
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  groupId: Int
  groupId_not: Int
  groupId_in: [Int!]
  groupId_not_in: [Int!]
  groupId_lt: Int
  groupId_lte: Int
  groupId_gt: Int
  groupId_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subname: String
  subname_not: String
  subname_in: [String!]
  subname_not_in: [String!]
  subname_lt: String
  subname_lte: String
  subname_gt: String
  subname_gte: String
  subname_contains: String
  subname_not_contains: String
  subname_starts_with: String
  subname_not_starts_with: String
  subname_ends_with: String
  subname_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  images: String
  images_not: String
  images_in: [String!]
  images_not_in: [String!]
  images_lt: String
  images_lte: String
  images_gt: String
  images_gte: String
  images_contains: String
  images_not_contains: String
  images_starts_with: String
  images_not_starts_with: String
  images_ends_with: String
  images_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  currency: String
  currency_not: String
  currency_in: [String!]
  currency_not_in: [String!]
  currency_lt: String
  currency_lte: String
  currency_gt: String
  currency_gte: String
  currency_contains: String
  currency_not_contains: String
  currency_starts_with: String
  currency_not_starts_with: String
  currency_ends_with: String
  currency_not_ends_with: String
  qty: Int
  qty_not: Int
  qty_in: [Int!]
  qty_not_in: [Int!]
  qty_lt: Int
  qty_lte: Int
  qty_gt: Int
  qty_gte: Int
  qtySuffix: String
  qtySuffix_not: String
  qtySuffix_in: [String!]
  qtySuffix_not_in: [String!]
  qtySuffix_lt: String
  qtySuffix_lte: String
  qtySuffix_gt: String
  qtySuffix_gte: String
  qtySuffix_contains: String
  qtySuffix_not_contains: String
  qtySuffix_starts_with: String
  qtySuffix_not_starts_with: String
  qtySuffix_ends_with: String
  qtySuffix_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  node(id: ID!): Node
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
}
`
      }
    